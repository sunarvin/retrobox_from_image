
/*
 * Author: Arvin Sun
 * E-mail: sunarvin@hotmail.com

 * This program is for an engineering board and has no warranty.
 * You use at your own risk. The author is not responsible for any loss or damage the program involved.

 * This program is modified based on Texas Instruments's AM335x .dts file.
 * It is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

/dts-v1/;

#include "am33xx.dtsi"
#include <dt-bindings/pwm/pwm.h>
#include <dt-bindings/interrupt-controller/irq.h>

/ {
    model = "Engineering board";
    compatible = "ti,am33xx";

    memory@80000000 {
        device_type = "memory";
        reg = <0x80000000 0x08000000>; /* 128 MB */
    };

    chosen {
        stdout-path = &uart0;
    };

    vmmcsd_fixed: fixedregulator1 {
        compatible = "regulator-fixed";
        regulator-name = "vmmcsd_fixed";
        regulator-min-microvolt = <3300000>;
        regulator-max-microvolt = <3300000>;
        regulator-boot-on;
    };

    leds {
        pinctrl-names = "default";
        pinctrl-0 = <&user_leds_s0>;

        compatible = "gpio-leds";

        led0 {
            label = "white_heartbeat";
            gpios = <&gpio0 18 GPIO_ACTIVE_HIGH>;
            linux,default-trigger = "heartbeat";
            default-state = "off";
        };

        led1 {
            label = "blue_user";
            gpios = <&gpio1 16 GPIO_ACTIVE_HIGH>;
            default-state = "off";
        };

        led2 {
            label = "red_error";
            gpios = <&gpio1 17 GPIO_ACTIVE_HIGH>;
            linux,default-trigger = "mmc0";
            default-state = "off";
        };
    };

    gpio_buttons: gpio_buttons {
        compatible = "gpio-keys";
        #address-cells = <1>;
        #size-cells = <0>;

        switch1 {
            label = "left_key";
            linux,code = <0x100>;
            gpios = <&gpio1 21 GPIO_ACTIVE_HIGH>;
        };

        switch2 {
            label = "middle_key";
            linux,code = <0x101>;
            gpios = <&gpio1 20 GPIO_ACTIVE_HIGH>;
        };

        switch3 {
            label = "right_key";
            linux,code = <0x102>;
            gpios = <&gpio1 22 GPIO_ACTIVE_HIGH>;
        };
    };

    lcd_bl: backlight {
        compatible = "pwm-backlight";
        pwms = <&ecap0 0 50000 PWM_POLARITY_INVERTED>;
        /*
        brightness-levels = <0 58 61 66 75 90 125 170 255>;
        default-brightness-level = <7>;
        */
        brightness-levels = <0 32 64 96 128 160 192 224 255>;
        default-brightness-level = <1>;
    };

    panel {
        compatible = "ti,tilcdc,panel";
        pinctrl-names = "default";
        pinctrl-0 = <&lcd_pins_default>;
        backlight = <&lcd_bl>;
        status = "okay";
        panel-info {
            ac-bias         = <255>;
            ac-bias-intrpt  = <0>;
            dma-burst-sz    = <16>;
            bpp             = <32>;
            fdd             = <0x80>;
            sync-edge       = <0>;
            sync-ctrl       = <1>;
            raster-order    = <0>;
            fifo-th         = <0>;
        };

        display-timings {
            native-mode = <&timing0>;
            timing0: 480x272 {
                clock-frequency = <3000000>;

                hactive         = <480>;
                vactive         = <272>;

                hback-porch     = <43>;
                hfront-porch    = <2>;
                hsync-len       = <2>;
                hsync-active    = <1>;

                vback-porch     = <12>;
                vfront-porch    = <2>;
                vsync-len       = <2>;
                vsync-active    = <1>;
            };
        };
    };
};


&am33xx_pinmux {
    pinctrl-names = "default";
    pinctrl-0 = <&gpio_keys_s0>;

    nandflash_pins: pinmux_nandflash {
        pinctrl-single,pins = <
            AM33XX_IOPAD(0x800, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad0.gpmc_ad0 */
            AM33XX_IOPAD(0x804, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad1.gpmc_ad1 */
            AM33XX_IOPAD(0x808, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad2.gpmc_ad2 */
            AM33XX_IOPAD(0x80c, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad3.gpmc_ad3 */
            AM33XX_IOPAD(0x810, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad4.gpmc_ad4 */
            AM33XX_IOPAD(0x814, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad5.gpmc_ad5 */
            AM33XX_IOPAD(0x818, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad6.gpmc_ad6 */
            AM33XX_IOPAD(0x81c, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad7.gpmc_ad7 */
            AM33XX_IOPAD(0x870, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_wait0.gpmc_wait0 */
            AM33XX_IOPAD(0x87c, PIN_OUTPUT | MUX_MODE0)		/* gpmc_csn0.gpmc_csn0 */
            AM33XX_IOPAD(0x890, PIN_OUTPUT | MUX_MODE0)		/* gpmc_advn_ale.gpmc_advn_ale */
            AM33XX_IOPAD(0x894, PIN_OUTPUT | MUX_MODE0)		/* gpmc_oen_ren.gpmc_oen_ren */
            AM33XX_IOPAD(0x898, PIN_OUTPUT | MUX_MODE0)		/* gpmc_wen.gpmc_wen */
            AM33XX_IOPAD(0x89c, PIN_OUTPUT | MUX_MODE0)		/* gpmc_be0n_cle.gpmc_be0n_cle */
        >;
    };

    lcd_pins_default: lcd_pins_default {
        pinctrl-single,pins = <
            AM33XX_IOPAD(0x8a0, PIN_OUTPUT | MUX_MODE0) /* lcd_data0.lcd_data0 */
            AM33XX_IOPAD(0x8a4, PIN_OUTPUT | MUX_MODE0) /* lcd_data1.lcd_data1 */
            AM33XX_IOPAD(0x8a8, PIN_OUTPUT | MUX_MODE0) /* lcd_data2.lcd_data2 */
            AM33XX_IOPAD(0x8ac, PIN_OUTPUT | MUX_MODE0) /* lcd_data3.lcd_data3 */
            AM33XX_IOPAD(0x8b0, PIN_OUTPUT | MUX_MODE0) /* lcd_data4.lcd_data4 */
            AM33XX_IOPAD(0x8b4, PIN_OUTPUT | MUX_MODE0) /* lcd_data5.lcd_data5 */
            AM33XX_IOPAD(0x8b8, PIN_OUTPUT | MUX_MODE0) /* lcd_data6.lcd_data6 */
            AM33XX_IOPAD(0x8bc, PIN_OUTPUT | MUX_MODE0) /* lcd_data7.lcd_data7 */
            AM33XX_IOPAD(0x8c0, PIN_OUTPUT | MUX_MODE0) /* lcd_data8.lcd_data8 */
            AM33XX_IOPAD(0x8c4, PIN_OUTPUT | MUX_MODE0) /* lcd_data9.lcd_data9 */
            AM33XX_IOPAD(0x8c8, PIN_OUTPUT | MUX_MODE0) /* lcd_data10.lcd_data10 */
            AM33XX_IOPAD(0x8cc, PIN_OUTPUT | MUX_MODE0) /* lcd_data11.lcd_data11 */
            AM33XX_IOPAD(0x8d0, PIN_OUTPUT | MUX_MODE0) /* lcd_data12.lcd_data12 */
            AM33XX_IOPAD(0x8d4, PIN_OUTPUT | MUX_MODE0) /* lcd_data13.lcd_data13 */
            AM33XX_IOPAD(0x8d8, PIN_OUTPUT | MUX_MODE0) /* lcd_data14.lcd_data14 */
            AM33XX_IOPAD(0x8dc, PIN_OUTPUT | MUX_MODE0) /* lcd_data15.lcd_data15 */
            AM33XX_IOPAD(0x8e0, PIN_OUTPUT_PULLDOWN | MUX_MODE0)    /* lcd_vsync.lcd_vsync */
            AM33XX_IOPAD(0x8e4, PIN_OUTPUT_PULLDOWN | MUX_MODE0)    /* lcd_hsync.lcd_hsync */
            AM33XX_IOPAD(0x8e8, PIN_OUTPUT_PULLDOWN | MUX_MODE0)    /* lcd_pclk.lcd_pclk */
            AM33XX_IOPAD(0x8ec, PIN_OUTPUT_PULLDOWN | MUX_MODE0)    /* lcd_ac_bias_en.lcd_ac_bias_en */
        >;
    };

    user_leds_s0: user_leds_s0 {
        pinctrl-single,pins = <
            AM33XX_IOPAD(0x840, PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* gpmc_a0.gpio1[16] */
            AM33XX_IOPAD(0x844, PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* gpmc_a1.gpio1[17] */
            AM33XX_IOPAD(0xA1C, PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* usb0_drvvbus.gpio0[18] */
        >;
    };

    gpio_keys_s0: gpio_keys_s0 {
        pinctrl-single,pins = <
            AM33XX_IOPAD(0x850, PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a4.gpio1[20] */
            AM33XX_IOPAD(0x854, PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a5.gpio1[21] */
            AM33XX_IOPAD(0x858, PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a6.gpio1[22] */
        >;
    };

    i2c1_pins: pinmux_i2c1_pins {
        pinctrl-single,pins = <
            AM33XX_IOPAD(0x95c, PIN_INPUT | MUX_MODE2)          /* spi0_cs0.I2C1_SCL */
            AM33XX_IOPAD(0x958, PIN_INPUT | MUX_MODE2)          /* spi0_d1.I2C1_SDA */
        >;
    };

    uart0_pins: pinmux_uart0_pins {
        pinctrl-single,pins = <
            AM33XX_IOPAD(0x970, PIN_INPUT_PULLUP | MUX_MODE0)   /* uart0_rxd.uart0_rxd */
            AM33XX_IOPAD(0x974, PIN_OUTPUT_PULLDOWN | MUX_MODE0)/* uart0_txd.uart0_txd */
        >;
    };

    ecap0_pins: backlight_pins {
        pinctrl-single,pins = <
            AM33XX_IOPAD(0x964, PIN_OUTPUT | MUX_MODE0)
        >;
    };

    ecap1_pins: buzzer_pins {
        pinctrl-single,pins = <
            AM33XX_IOPAD(0x848, PIN_OUTPUT | MUX_MODE6)         /* gpmc_a2 */
        >;
    };

    cpsw_default: cpsw_default {
        pinctrl-single,pins = <
            AM33XX_IOPAD(0x90c, PIN_INPUT_PULLDOWN | MUX_MODE1) /* gmii1_crs.rmii1_crs_dv */
            AM33XX_IOPAD(0x910, PIN_INPUT_PULLDOWN | MUX_MODE1) /* gmii1_rxer.rmii1_rxer */
            AM33XX_IOPAD(0x914, PIN_OUTPUT | MUX_MODE1)         /* gmii1_txen.rmii1_txen */
            AM33XX_IOPAD(0x928, PIN_OUTPUT | MUX_MODE1)         /* gmii1_txd0.rmii1_txd0 */
            AM33XX_IOPAD(0x924, PIN_OUTPUT | MUX_MODE1)         /* gmii1_txd1.rmii1_txd1 */
            AM33XX_IOPAD(0x940, PIN_INPUT_PULLDOWN | MUX_MODE1) /* gmii1_rxd0.rmii1_rxd0 */
            AM33XX_IOPAD(0x93c, PIN_INPUT_PULLDOWN | MUX_MODE1) /* gmii1_rxd1.rmii1_rxd1 */
            AM33XX_IOPAD(0x944, PIN_INPUT_PULLDOWN | MUX_MODE0) /* rmii1_refclk.rmii1_refclk */
        >;
    };

    cpsw_sleep: cpsw_sleep {
        pinctrl-single,pins = <
            AM33XX_IOPAD(0x90c, PIN_INPUT_PULLDOWN | MUX_MODE7) /* gmii1_crs.rmii1_crs_dv */
            AM33XX_IOPAD(0x910, PIN_INPUT_PULLDOWN | MUX_MODE7) /* gmii1_rxer.rmii1_rxer */
            AM33XX_IOPAD(0x914, PIN_INPUT_PULLDOWN | MUX_MODE7) /* gmii1_txen.rmii1_txen */
            AM33XX_IOPAD(0x928, PIN_INPUT_PULLDOWN | MUX_MODE7) /* gmii1_txd0.rmii1_txd0 */
            AM33XX_IOPAD(0x924, PIN_INPUT_PULLDOWN | MUX_MODE7) /* gmii1_txd1.rmii1_txd1 */
            AM33XX_IOPAD(0x940, PIN_INPUT_PULLDOWN | MUX_MODE7) /* gmii1_rxd0.rmii1_rxd0 */
            AM33XX_IOPAD(0x93c, PIN_INPUT_PULLDOWN | MUX_MODE7) /* gmii1_rxd1.rmii1_rxd1 */
            AM33XX_IOPAD(0x944, PIN_INPUT_PULLDOWN | MUX_MODE7) /* rmii1_refclk.rmii1_refclk */
        >;
    };

    davinci_mdio_default: davinci_mdio_default {
        pinctrl-single,pins = <
            /* MDIO */
            AM33XX_IOPAD(0x948, PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)   /* mdio_data.mdio_data */
            AM33XX_IOPAD(0x94c, PIN_INPUT_PULLUP | MUX_MODE0)                   /* mdio_clk.mdio_clk */
        >;
    };

    davinci_mdio_sleep: davinci_mdio_sleep {
        pinctrl-single,pins = <
            /* MDIO reset value */
            AM33XX_IOPAD(0x948, PIN_INPUT_PULLDOWN | MUX_MODE7)
            AM33XX_IOPAD(0x94c, PIN_INPUT_PULLDOWN | MUX_MODE7)
        >;
    };

    /* TF Card */
    mmc1_pins: pinmux_mmc1_pins {
        pinctrl-single,pins = <
            AM33XX_IOPAD(0x960, PIN_INPUT | MUX_MODE5)          /* spio0_cs1.sdcd_mux0 */
            AM33XX_IOPAD(0x8fc, PIN_INPUT_PULLUP | MUX_MODE0)   /* mmc0_dat0.mmc0_dat0 */
            AM33XX_IOPAD(0x8f8, PIN_INPUT_PULLUP | MUX_MODE0)   /* mmc0_dat1.mmc0_dat1 */
            AM33XX_IOPAD(0x8f4, PIN_INPUT_PULLUP | MUX_MODE0)   /* mmc0_dat2.mmc0_dat2 */
            AM33XX_IOPAD(0x8f0, PIN_INPUT_PULLUP | MUX_MODE0)   /* mmc0_dat3.mmc0_dat3 */
            AM33XX_IOPAD(0x904, PIN_INPUT_PULLUP | MUX_MODE0)   /* mmc0_cmd.mmc0_cmd */
            AM33XX_IOPAD(0x900, PIN_INPUT_PULLUP | MUX_MODE0)   /* mmc0_clk.mmc0_clk */
            /* It is disabled because TF is always writable as a boot device */
/*          AM33XX_IOPAD(0x9a0, PIN_INPUT | MUX_MODE4)         mcasp0_aclkr.mmc0_sdwp */
        >;
    };

};

&uart0 {
    pinctrl-names = "default";
    pinctrl-0 = <&uart0_pins>;

    status = "okay";
};

/* disable rtc on-chip */
&rtc {
    status = "disabled";
};

&i2c1 {
    pinctrl-names = "default";
    pinctrl-0 = <&i2c1_pins>;

    status = "okay";
    clock-frequency = <400000>;

    ds1337: ds1337@68 {
        compatible = "dallas,ds1337";
        reg = <0x68>;
    };
};

/* USB */
&usb {
    status = "okay";
};

&usb_ctrl_mod {
    status = "okay";
};

&usb0_phy {
    status = "okay";
    #phy-cells = <0>;
};

&usb1_phy {
    status = "okay";
    #phy-cells = <0>;
};

&usb0 {
    status = "okay";
    /*
    dr_mode = "otg";
    */
    dr_mode = "peripheral";
};

&usb1 {
    status = "okay";
    dr_mode = "host";
};

&cppi41dma {
    status = "okay";
};
/* USB END */

/* PWM0 for backlight of LCD */
&ecap0 {
    status = "okay";
    pinctrl-names = "default";
    pinctrl-0 = <&ecap0_pins>;
};

&ehrpwm0 {
    status = "okay";
};

&epwmss0 {
    status = "okay";
};
/* PWM0 END */

/* PWM1 for buzzer */
&ecap1 {
    status = "okay";
    pinctrl-names = "default";
    pinctrl-0 = <&ecap1_pins>;
};

&ehrpwm1 {
    status = "okay";
};

&epwmss1 {
    status = "okay";
};
/* PWM1 END */

&wkup_m3_ipc {
    status = "disabled";
};

/* ETH 100M/RMII with external clock source */
&mac {
    slaves = <1>;
    pinctrl-names = "default", "sleep";
    pinctrl-0 = <&cpsw_default>;
    pinctrl-1 = <&cpsw_sleep>;
    status = "okay";
};

&davinci_mdio {
    pinctrl-names = "default", "sleep";
    pinctrl-0 = <&davinci_mdio_default>;
    pinctrl-1 = <&davinci_mdio_sleep>;
    status = "okay";
};

&cpsw_emac0 {
    phy_id = <&davinci_mdio>, <0>;
    phy-mode = "rmii";
};

&phy_sel {
    /* rmii_io_clk_en, port1 on RMII mode */
    reg = < 0x44e10650 0x41 >;

    /* RMII mode uses an external oscillator as the clock source */
    rmii-clock-ext;
};
/* ETH END */

/* GPMC for NANDFLASH */
&gpmc {
    status = "okay";
    pinctrl-names = "default";
    pinctrl-0 = <&nandflash_pins>;

    ranges = <0 0 0x08000000 0x1000000>;    /* CS0: 16MB for NAND */

    nand@0,0 {
        compatible = "ti,omap2-nand";
        reg = <0 0 4>; /* CS0, offset 0, IO size 4 */
        interrupt-parent = <&gpmc>;
        interrupts = <0 IRQ_TYPE_NONE>, /* fifoevent */
                 <1 IRQ_TYPE_NONE>; /* termcount */
        rb-gpios = <&gpmc 0 GPIO_ACTIVE_HIGH>; /* gpmc_wait0 */
        nand-bus-width = <8>;
        ti,nand-ecc-opt = "bch8";
        gpmc,device-width = <1>;
        gpmc,sync-clk-ps = <0>;
        gpmc,cs-on-ns = <0>;
        gpmc,cs-rd-off-ns = <44>;
        gpmc,cs-wr-off-ns = <44>;
        gpmc,adv-on-ns = <6>;
        gpmc,adv-rd-off-ns = <34>;
        gpmc,adv-wr-off-ns = <44>;
        gpmc,we-on-ns = <0>;
        gpmc,we-off-ns = <40>;
        gpmc,oe-on-ns = <0>;
        gpmc,oe-off-ns = <54>;
        gpmc,access-ns = <64>;
        gpmc,rd-cycle-ns = <82>;
        gpmc,wr-cycle-ns = <82>;
        gpmc,bus-turnaround-ns = <0>;
        gpmc,cycle2cycle-delay-ns = <0>;
        gpmc,clk-activation-ns = <0>;
        gpmc,wr-access-ns = <40>;
        gpmc,wr-data-mux-bus-ns = <0>;
        /* MTD partition table */
        /* All SPL-* partitions are sized to minimal length
         * which can be independently programmable. For
         * NAND flash this is equal to size of erase-block */
        #address-cells = <1>;
        #size-cells = <1>;
        partition@0 {
            label = "NAND.SPL";
            reg = <0x00000000 0x000020000>;
        };
        partition@1 {
            label = "NAND.u-boot-spl-os";
            reg = <0x00020000 0x00040000>;
        };
        partition@2 {
            label = "NAND.u-boot";
            reg = <0x00060000 0x00100000>;
        };
        partition@3 {
            label = "NAND.u-boot-env";
            reg = <0x00160000 0x00020000>;
        };
        partition@4 {
            label = "NAND.kernel";
            reg = <0x00180000 0x00800000>;
        };
        partition@5 {
            label = "NAND.file-system";
            reg = <0x00200000 0x0FD00000>;
        };

    };
};
/* GPMC/NANDFLASH END*/

/* MMC1 for TF */
&mmc1 {
    status = "okay";
    vmmc-supply = <&vmmcsd_fixed>;
    bus-width = <0x4>;
    pinctrl-names = "default";
    pinctrl-0 = <&mmc1_pins>;
    cd-gpios = <&gpio0 6 GPIO_ACTIVE_LOW>;
};

/* Keep TF card inserted status when reset */
&gpio0 {
    ti,no-reset-on-init;
};
/* MMC1 END */

/* TSC for Touch Screen */
&tscadc {
    status = "okay";
    tsc {
        ti,wires = <4>;
        ti,x-plate-resistance = <200>;
        ti,coordinate-readouts = <5>;
        ti,wire-config = <0x00 0x11 0x22 0x33>;
    };
};
/* TSC END */

/* LCDC */
&lcdc {
    status = "okay";

    /* according to the chip manual:
       for 24bpp
    blue-and-red-wiring = "straight";

       for 16bpp, the Red and Blue signal/pins should be swapped.
    blue-and-red-wiring = "crossed";
    */

    /* real configuration for
         * 16bpp for the engineering board
         * TI SDK 06.03.00.106 
         * Kernel 4.19 
    */
    blue-and-red-wiring = "straight";
};
/* LCDC END */

&sgx {
    /*
    status = "okay";
    */
    status = "disabled";
};

&sham {
    status = "okay";
};

&aes {
    status = "okay";
};

